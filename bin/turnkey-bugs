#!/usr/bin/env python3
from colorama import Fore, Back, Style
import colorama
from octohub.connection import Connection, Pager
from argparse import ArgumentParser
from os import getcwd, getenv
from os.path import dirname, realpath, basename
import json

colorama.init(wrap=False)


labels_margin = [
        ('bug', 'B', Fore.RED),
        ('critical', 'C', Fore.RED + Style.BRIGHT),
        ('security', 'S', Fore.MAGENTA + Style.BRIGHT),
        ('feature', 'F', Fore.GREEN),
        ('workaround', 'W', Fore.BLUE),
        ('workaround', 'I', Fore.CYAN),
]

conn = Connection(getenv('GITHUB_TOKEN', None))
issues_uri = '/repos/turnkeylinux/tracker/issues'
labels_uri = '/repos/turnkeylinux/tracker/labels'
milestones_uri = '/repos/turnkeylinux/tracker/milestones'

def iter_all_issues(params=None, strip_closed=True):
    if params is None:
        params = {}
    pager = Pager(conn, issues_uri, params=params)
    for page in pager:
        for issue in page:
            if issue.state == 'open':
                yield issue

def iter_all_labels():
    pager = Pager(conn, labels_uri, params={})
    for page in pager:
        for label in page:
            yield label

def iter_all_milestones():
    pager = Pager(conn, milestones_uri, params={})
    for page in pager:
        for milestone in page:
            yield milestone

def get_product():
    path = realpath(getcwd())
    while True:
        n = dirname(path)
        if n == path:
            return None
        elif n == '/turnkey/fab/products':
            return { 'name': basename(path), 'path': path }
        path = n

if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('-l', '--label', default=None, action='append',
            help='''
                label(s) to filter results by. (specify multiple times for ORing
                together filters).
                If unset defaults to `core,<current-product>` (where current product is
                determined by current working directory).
            ''')
    parser.add_argument('-f', '--filter', default=None, action='append',
            help='''
                label(s) to filter results by. (specify multiple times for ANDing
                together filters).
                If unset defaults to nothing (where current product is
                determined by current working directory).
            ''')
    parser.add_argument('-m', '--milestone', default=None, action='append',
            help='''
            milestone to filter by, if left unset will select all.
            Multiple instances combined in logical OR.''')
    subparsers = parser.add_subparsers(dest='cmd')
    labels = subparsers.add_parser('labels')
    milestones = subparsers.add_parser('milestones')
    args = parser.parse_args()

    if args.cmd:
        if args.cmd == 'milestones':
            print('Open', 'Closed', 'Title')
            for milestone in iter_all_milestones():
                print(
                        str(milestone.open_issues).ljust(4),
                        str(milestone.closed_issues).ljust(6),
                        milestone.title)
        elif args.cmd == 'labels':
            print('Name'.ljust(26) +  ' | Description')
            for label in iter_all_labels():
                print(label.name.ljust(26) + ' | ', end='')
                print(label.description if label.description else '')
    else:
        label_or_checks = []
        if args.label is None:
            product = get_product()
            if product:
                label_or_checks.extend([product['name'], 'core'])
        else:
            label_or_checks.extend(args.label)
        label_and_checks = [] if args.filter is None else args.filter
        milestone_checks = [] if args.milestone is None else args.milestone


        for issue in iter_all_issues():
            label_names = [l.name for l in issue.labels]
            if not any(map(lambda x: x in label_names, label_or_checks)):
                continue
            if not all(map(lambda x: x in label_names, label_and_checks)):
                continue
            if milestone_checks:
                if not issue.milestone or issue.milestone.title not in milestone_checks:
                    continue
            p = ''
            for (l_name, l_char, l_col) in labels_margin:
                if l_name in label_names:
                    p += l_col + l_char + Fore.RESET + Style.NORMAL
                else:
                    p += Fore.LIGHTBLACK_EX + l_char + Fore.RESET + Style.NORMAL

            milestone = issue.milestone.title if issue.milestone else "N/A"
            if milestone == 'N/A':
                milestone = Fore.RED + milestone.ljust(8) + Fore.RESET
            else:
                milestone = Fore.BLUE + milestone.ljust(8) + Fore.RESET
            print(
                    f'{p} {Fore.YELLOW}#{issue.number: <5}{Fore.RESET}'
                    f' {milestone} {issue.title}')
